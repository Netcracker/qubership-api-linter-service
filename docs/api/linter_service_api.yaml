openapi: 3.0.3
info:
  title: Linter Service API
  version: "1.0"
  description: The Linter Service API provides a set of operations for validating (linting) the quality of OpenAPI specifications. It enables the management of rulesets used for validation, as well as the validation process itself.
servers:
  - url: /
security:
  - BearerAuth: []
  - api-key: []
  - PersonalAccessToken: []
tags:
  - name: Ruleset Management
    description: API related to management of validation rulesets.
paths:
  /api/v1/rulesets:
    get:
      tags:
        - Ruleset Management
      summary: Get a list of rulesets.
      description: >
        Returns a sorted list of rulesets.  
          The sorting follows a strict order:
            1. The currently active ruleset (always appears first).
            2. Rulesets that have never been activated (in order of creation).
            3. All other rulesets, sorted by the latest activation date (most recent first).

        There is always one active ruleset in the system.
        This operation is available only to users with the `system administrator` role.
      operationId: getRulesets
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
          example: 1
        - name: limit
          in: query
          description: Number of items per page (max 100).
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                items:
                  $ref: "#/components/schemas/Ruleset"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - Ruleset Management
      summary: Create a new ruleset
      description: >
        Allows an admin to create a new ruleset by uploading a YAML file.
        The new ruleset is set to 'Inactive' by default.
        This operation is available only to users with the `system administrator` role.
      operationId: postRuleset
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/RulesetCreate"
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ruleset"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/rulesets/{id}:
    get:
      tags:
        - Ruleset Management
      summary: Get ruleset metadata
      description: >
        Returns the ruleset name, status, and activation history.
      security:
        - BearerAuth: []
        - api-key: []
      operationId: getRulesetById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique ruleset ID
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ruleset"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Ruleset Management
      summary: Delete a ruleset
      description: >
        Delete a ruleset.\
        Ruleset can be deleted if it is in inactive status and no version validated against this ruleset exist.
        This operation is available only to users with the `system administrator` role.
      operationId: deleteRuleset
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique ruleset identifier
      responses:
        "204":
          description: Success
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/rulesets/{id}/activate:
    post:
      tags:
        - Ruleset Management
      summary: Activate a ruleset
      description: >
        Activate an inactive ruleset. Currently active ruleset is automatically deactivated after new ruleset is activated.
        This operation is available only to users with the `system administrator` role.
      operationId: postRulesetsActivate
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique ruleset ID.
      responses:
        "204":
          description: Success
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/rulesets/{id}/download:
    get:
      tags:
        - Ruleset Management
      summary: Download Spectral ruleset file
      description: >
        Returns the plain YAML content of the ruleset.
      security: []
      operationId: getRulesetDownload
      parameters:
        - name: id
          in: path
          description: Unique ruleset ID
          required: true
          schema:
            type: string
        - name: disposition
          in: query
          description: >
            Controls the content disposition of the response.
            Use `inline` to display in browser, or `attachment` to trigger download locally.
          schema:
            type: string
            enum:
              - inline
              - attachment
            default: inline
      responses:
        "200":
          description: Success
          content:
            application/yaml:
              schema:
                type: string
                description: YAML content of Spectral ruleset file.
          headers:
            Content-Disposition:
              schema:
                type: string
                description: Header is required if inlineContent = false. When present, must have "attachment" and "fileName" parameters.
                example: attachment; filename="<original file name>.yaml"
            X-Content-Type-Options:
              schema:
                type: string
                enum: [nosniff]
                example: nosniff
                description: Prevents MIME-type sniffing.
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    ErrorResponse:
      description: An error description
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          description: HTTP Status Code
          type: integer
        code:
          description: Internal string error code. Mandatory in response.
          type: string
        message:
          description: The attribute contains an error message.
          type: string
        params:
          type: object
          description: Optional message parameters
        debug:
          description: Debug details
          type: string
    Ruleset:
      description: Ruleset's parameters
      type: object
      required:
        - id
        - name
        - status
        - createdAt
        - canBeDeleted
      properties:
        id:
          type: string
          description: Unique identifier of the ruleset.
        name:
          type: string
          description: Unique name of the ruleset.
          example: "OpenAPI Quality Ruleset"
        status:
          description: Status of the ruleset.
          type: string
          enum:
            - active
            - inactive
        activationHistory:
          description: |
            Information about periods when rulest was activated/deactivated. 
            If empty, means that ruleset was never activated.
            Important: Only the latest 100 activation records are returned.
          type: array
          items:
            type: object
            properties:
              activeFrom:
                description: Date when ruleset was activated.
                type: string
                format: date-time
              activeTo:
                description: Date when ruleset was deactivated.
                type: string
                format: date-time
        createdAt:
          description: Date of ruleset creation.
          type: string
          format: date-time
        canBeDeleted:
          description: |
            Indicates whether the ruleset can be deleted:
              - canBeDeleted = true - if both of the following conditins are met:
                  - ruleset is in inactive status
                  - there is no existing version revision that was validated against current ruleset.
          type: boolean
          example: true
    RulesetCreate:
      type: object
      required:
        - rulesetName
        - rulesetFile
      properties:
        rulesetName:
          description: Unique name of the ruleset.
          type: string
          example: "New Ruleset"
        rulesetFile:
          description: YAML file with Spectral rules.
          type: string
          format: binary
  securitySchemes:
    BearerAuth:
      type: http
      description: Bearer token authentication. Default security scheme for API usage.
      scheme: bearer
      bearerFormat: JWT
    api-key:
      type: apiKey
      description: Api-key authentication.
      name: api-key
      in: header
    PersonalAccessToken:
      type: apiKey
      description: Authentication by personal access token.
      name: X-Personal-Access-Token
      in: header
